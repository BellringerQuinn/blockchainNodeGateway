// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	http "net/http"

	model "github.com/BellringerQuinn/blockchainNodeGateway/model"
	mock "github.com/stretchr/testify/mock"

	provider "github.com/BellringerQuinn/blockchainNodeGateway/provider"
)

// ProviderSelector is an autogenerated mock type for the ProviderSelector type
type ProviderSelector struct {
	mock.Mock
}

// ConstructRequest provides a mock function with given fields: network, resource
func (_m *ProviderSelector) ConstructRequest(network model.Network, resource model.Resource) (*http.Request, provider.Provider) {
	ret := _m.Called(network, resource)

	var r0 *http.Request
	var r1 provider.Provider
	if rf, ok := ret.Get(0).(func(model.Network, model.Resource) (*http.Request, provider.Provider)); ok {
		return rf(network, resource)
	}
	if rf, ok := ret.Get(0).(func(model.Network, model.Resource) *http.Request); ok {
		r0 = rf(network, resource)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(model.Network, model.Resource) provider.Provider); ok {
		r1 = rf(network, resource)
	} else {
		r1 = ret.Get(1).(provider.Provider)
	}

	return r0, r1
}

// DisableProviderForNetworkAndResource provides a mock function with given fields: _a0, network, resource
func (_m *ProviderSelector) DisableProviderForNetworkAndResource(_a0 provider.Provider, network model.Network, resource model.Resource) {
	_m.Called(_a0, network, resource)
}

type mockConstructorTestingTNewProviderSelector interface {
	mock.TestingT
	Cleanup(func())
}

// NewProviderSelector creates a new instance of ProviderSelector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProviderSelector(t mockConstructorTestingTNewProviderSelector) *ProviderSelector {
	mock := &ProviderSelector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
