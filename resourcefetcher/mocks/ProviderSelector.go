// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	model "github.com/BellringerQuinn/blockchainNodeGateway/model"
	mock "github.com/stretchr/testify/mock"
)

// ProviderSelector is an autogenerated mock type for the ProviderSelector type
type ProviderSelector struct {
	mock.Mock
}

// ConstructRequest provides a mock function with given fields: params
func (_m *ProviderSelector) ConstructRequest(params model.Params) (interface{}, model.Provider, error) {
	ret := _m.Called(params)

	var r0 interface{}
	var r1 model.Provider
	var r2 error
	if rf, ok := ret.Get(0).(func(model.Params) (interface{}, model.Provider, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(model.Params) interface{}); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(model.Params) model.Provider); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Get(1).(model.Provider)
	}

	if rf, ok := ret.Get(2).(func(model.Params) error); ok {
		r2 = rf(params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DisableProviderForNetwork provides a mock function with given fields: _a0, network
func (_m *ProviderSelector) DisableProviderForNetwork(_a0 model.Provider, network model.Network) {
	_m.Called(_a0, network)
}

// DisableProviderForParams provides a mock function with given fields: _a0, params
func (_m *ProviderSelector) DisableProviderForParams(_a0 model.Provider, params model.Params) {
	_m.Called(_a0, params)
}

type mockConstructorTestingTNewProviderSelector interface {
	mock.TestingT
	Cleanup(func())
}

// NewProviderSelector creates a new instance of ProviderSelector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProviderSelector(t mockConstructorTestingTNewProviderSelector) *ProviderSelector {
	mock := &ProviderSelector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
